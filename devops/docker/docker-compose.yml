services:
  db:
    image: postgres:latest
    container_name: db
    
    ports:
      - "5432:5432"
    environment:
      - DATABASE_ROOT=${DATABASE_ROOT}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=${DATABASE_PORT}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../pg_conf/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    networks:
      - app-network
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend
    container_name: backend
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    volumes:
      - ../../backend:/app
    working_dir: /app
    command: >
      sh -c "python manage.py makemigrations && 
             python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: ../../frontend
  #     dockerfile: Dockerfile.frontend
  #   container_name: frontend
  #   env_file:
  #     - .env
  #   volumes:
  #     - /app/node_modules
  #     - ../../frontend:/app
  #   networks:
  #     - app-network
      
  
  # celery:
  #   build:
  #     context: ../../backend
  #     dockerfile: Dockerfile.backend
  #   command: celery -A config worker --loglevel=info
  #   env_file:
  #     - .env
  #   depends_on:
  #     - backend
  #     - redis
  #   volumes:
  #     - ../../backend:/app
  #   networks:
  #     - app-network

  # celery-beat:
  #   build:
  #     context: ../../backend
  #     dockerfile: Dockerfile.backend
  #   command: celery -A config beat --loglevel=info
  #   depends_on:
  #     - backend
  #     - redis
  #   env_file:
  #     - .env
  #   volumes:
  #     - ../../backend:/app
  #   networks:
  #     - app-network

  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #     - REDIS_PORT=6379
  #     - REDIS_DATABASES=4
  #   command: redis-server --requirepass ${REDIS_PASSWORD}
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 1s
  #     timeout: 1s
  #     retries: 10

volumes:
  db_data:
  # redis-data:

networks:
  app-network:
    driver: bridge
